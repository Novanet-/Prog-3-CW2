#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 65 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 17 #"DejaVu Sans Mono\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 155 155 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 155 155 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 140 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 92 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 140 140 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 17 #"DejaVu Sans Mono\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 255 255
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 192 46 214 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 57 89 216 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 255 255
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 2309 0 30 3 12 #"#lang scheme"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 18 #"reachability-table"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"l"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 5 #"table"
0 0 26 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 8 #"for-each"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"address"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 2 #") "
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                           ("
0 0 14 3 1 #"<"
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                           ("
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ("
0 0 14 3 11 #"vector-set!"
0 0 26 3 1 #" "
0 0 14 3 5 #"table"
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ("
0 0 14 3 5 #"error"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 18 #"reachability-table"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                             "
0 0 20 3 19 #"\"not valid address\""
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                             "
0 0 14 3 7 #"address"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"                "
0 0 14 3 1 #"l"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 14 3 5 #"table"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 18 3 10 #";;:marks 0"
0 0 26 29 1 #"\n"
0 0 18 3 5 #";;---"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"make-memory"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"l"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 5 #"apply"
0 0 26 3 1 #" "
0 0 14 3 6 #"vector"
0 0 26 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 18 3 20 #";;:marks 0          "
0 0 26 29 1 #"\n"
0 0 18 3 5 #";;---"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 5 #"begin"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"mem"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"mini-null"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"null\""
0 0 26 3 3 #")  "
0 0 18 3 35 #";;; reserved symbol for end of list"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"mini-cons"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 23 #"                      ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 3 #"mem"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #"  "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 2 #") "
0 0 14 3 3 #"mem"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                        "
0 0 14 3 7 #"address"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"mini-quote"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                         ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 3 #"mem"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 3 #"mem"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                         ("
0 0 14 3 4 #"set!"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                         "
0 0 14 3 7 #"address"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"deref"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 8 #"list-ref"
0 0 26 3 1 #" "
0 0 14 3 3 #"mem"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 4 #"size"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 14 3 1 #"x"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"mini-null?"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #") "
0 0 14 3 9 #"mini-null"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"mini-car"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"mini-cdr"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 5 #"deref"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"mini-append"
0 0 26 3 2 #" ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"l1"
0 0 26 3 1 #" "
0 0 14 3 2 #"l2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 10 #"mini-null?"
0 0 26 3 1 #" "
0 0 14 3 2 #"l1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 28 #"                            "
0 0 14 3 2 #"l2"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 14 3 9 #"mini-cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"mini-car"
0 0 26 3 1 #" "
0 0 14 3 2 #"l1"
0 0 26 3 3 #") ("
0 0 14 3 11 #"mini-append"
0 0 26 3 2 #" ("
0 0 14 3 8 #"mini-cdr"
0 0 26 3 1 #" "
0 0 14 3 2 #"l1"
0 0 26 3 2 #") "
0 0 14 3 2 #"l2"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 18 3 10 #";;:marks 0"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 32 #"convert-to-memory-representation"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sexp"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 1 #" "
0 0 14 3 7 #"mLength"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 11 #"sexp-valid?"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 3 #") ("
0 0 14 3 13 #"memory-valid?"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 9 #"newMemory"
0 0 26 3 2 #" ("
0 0 14 3 28 #"allocate-sexp-to-memory-iter"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 1 #" "
0 0 14 3 7 #"mLength"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 13 #"get-memLength"
0 0 26 3 1 #" "
0 0 14 3 9 #"newMemory"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 7 #"get-mem"
0 0 26 3 1 #" "
0 0 14 3 9 #"newMemory"
0 0 26 3 3 #") ("
0 0 14 3 13 #"get-memLength"
0 0 26 3 1 #" "
0 0 14 3 9 #"newMemory"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 28 #"allocate-sexp-to-memory-iter"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sexp"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 1 #" "
0 0 14 3 7 #"mLength"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 5 #"atom?"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 7 #"mLength"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 3 #") ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 7 #"mLength"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 3 #") ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 12 #"left-address"
0 0 26 3 2 #" ("
0 0 14 3 28 #"allocate-sexp-to-memory-iter"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 2 #") "
0 0 14 3 6 #"memory"
0 0 26 3 1 #" "
0 0 14 3 7 #"mLength"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 13 #"right-address"
0 0 26 3 2 #" ("
0 0 14 3 28 #"allocate-sexp-to-memory-iter"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 3 #") ("
0 0 14 3 7 #"get-mem"
0 0 26 3 1 #" "
0 0 14 3 12 #"left-address"
0 0 26 3 3 #") ("
0 0 14 3 13 #"get-memLength"
0 0 26 3 1 #" "
0 0 14 3 12 #"left-address"
0 0 26 3 30 #"))])                          "
0 0 26 29 1 #"\n"
0 0 26 3 33 #"                                ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 13 #"get-memLength"
0 0 26 3 1 #" "
0 0 14 3 13 #"right-address"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 39 #"                                      ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"get-sexp"
0 0 26 3 1 #" "
0 0 14 3 12 #"left-address"
0 0 26 3 3 #") ("
0 0 14 3 8 #"get-sexp"
0 0 26 3 1 #" "
0 0 14 3 13 #"right-address"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"get-mem"
0 0 26 3 1 #" "
0 0 14 3 13 #"right-address"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 39 #"                                      ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 13 #"get-memLength"
0 0 26 3 1 #" "
0 0 14 3 13 #"right-address"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 33 #"                                )"
0 0 26 29 1 #"\n"
0 0 26 3 31 #"                              )"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        )"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"          ]          "
0 0 26 29 1 #"\n"
0 0 26 3 24 #"    )                   "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"get-sexp"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"memList"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 26 3 1 #" "
0 0 14 3 7 #"memList"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 7 #"get-mem"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"memList"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 26 3 1 #" "
0 0 14 3 7 #"memList"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"get-memLength"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"memList"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 26 3 1 #" "
0 0 14 3 7 #"memList"
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"atom?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"sexp-valid?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"sexp"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 5 #"atom?"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 3 #") ("
0 0 14 3 7 #"string?"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 3 #") ("
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 11 #"sexp-valid?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 4 #")) ("
0 0 14 3 11 #"sexp-valid?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"sexp"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"memory-valid?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 6 #"memory"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 2 #") "
0 0 23 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 3 #") ("
0 0 16 3 5 #"begin"
0 0 26 3 2 #" ("
0 0 14 3 16 #"memory-contents?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 4 #")) ("
0 0 14 3 13 #"memory-valid?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"memory-contents?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 8 #"contents"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 7 #"string?"
0 0 26 3 1 #" "
0 0 14 3 8 #"contents"
0 0 26 3 2 #") "
0 0 23 3 2 #"#t"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"          [("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 8 #"contents"
0 0 26 3 3 #") ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 8 #"contents"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"number?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 8 #"contents"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 2 #"#f"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 93
(
 #";;Checks that the length of the list of roots is less than or equal "
 #"to the size of the memory"
) 0 0 26 29 1 #"\n"
0 0 18 3 68
#";;Then calls a function to return the full list of reachable address"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"tracer"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"roots"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 7 #"memSize"
0 0 26 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 2 #"<="
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 5 #"roots"
0 0 26 3 2 #") "
0 0 14 3 7 #"memSize"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 11 #"trace-roots"
0 0 26 3 1 #" "
0 0 14 3 5 #"roots"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 3 #"() "
0 0 14 3 7 #"memSize"
0 0 26 3 2 #"  "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 173
(
 #";;Checks that the current index being look at is within the bounds o"
 #"f the memory, if the accumulator has reached the end of the memory, "
 #"return the list of rachable addresses"
) 0 0 26 29 1 #"\n"
0 0 18 3 135
(
 #";;Otherwise, check if the current address at the accumulator index i"
 #"s in the lsit of roots, and hasn't already been marked as reachable"
) 0 0 26 29 1 #"\n"
0 0 18 3 107
(
 #";;If so, then add the current address (and all sub-addresses if it's"
 #" a pair) to the reachabile address list"
) 0 0 26 29 1 #"\n"
0 0 18 3 70
(
 #";;Otherwise, call this function again, increasing the accumulator by"
 #" 1"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"trace-roots"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"roots"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 1 #" "
0 0 14 3 7 #"memSize"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 14 3 7 #"memSize"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 13 #"reachableList"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 14 3 5 #"roots"
0 0 26 3 3 #") ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 11 #"trace-roots"
0 0 26 3 1 #" "
0 0 14 3 5 #"roots"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 2 #" ("
0 0 14 3 14 #"return-address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 4 #"()) "
0 0 14 3 7 #"memSize"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 11 #"trace-roots"
0 0 26 3 1 #" "
0 0 14 3 5 #"roots"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 1 #" "
0 0 14 3 7 #"memSize"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 110
(
 #";;If the memory element at the address is a string, then add the add"
 #"ress of that element to the reachable list"
) 0 0 26 29 1 #"\n"
0 0 18 3 100
(
 #";;Otherwise, it is a pair, so call this function again with the left"
 #" and right addresses of the pair"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"return-address"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 14 #"currentElement"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 26 3 1 #" "
0 0 14 3 14 #"currentElement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 15 #")              "
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 17 #"left-pair-address"
0 0 26 3 2 #" ("
0 0 14 3 12 #"left-address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 25 #"                        ["
0 0 14 3 18 #"right-pair-address"
0 0 26 3 2 #" ("
0 0 14 3 13 #"right-address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       )"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 10 #"left-cycle"
0 0 26 3 2 #" ("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 17 #"left-pair-address"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 3 #") ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 17 #"left-pair-address"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 30 #"                             ["
0 0 14 3 11 #"right-cycle"
0 0 26 3 3 #"  ("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 18 #"right-pair-address"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 3 #") ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 18 #"right-pair-address"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 62
#"                             )                                "
0 0 26 29 1 #"\n"
0 0 26 3 30 #"                             ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 1 #" "
0 0 14 3 10 #"left-cycle"
0 0 26 3 1 #" "
0 0 14 3 11 #"right-cycle"
0 0 26 3 3 #") ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 17 #"left-pair-address"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 3 #") ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 18 #"right-pair-address"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 6 #")))  ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 37 #"                                   [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 1 #" "
0 0 14 3 10 #"left-cycle"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 1 #" "
0 0 14 3 11 #"right-cycle"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 17 #"left-pair-address"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 5 #") ) ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 2 #" ("
0 0 14 3 14 #"return-address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 18 #"right-pair-address"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 37 #"                                   [("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 1 #" "
0 0 14 3 11 #"right-cycle"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 1 #" "
0 0 14 3 10 #"left-cycle"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 18 #"right-pair-address"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 5 #") ) ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 2 #" ("
0 0 14 3 14 #"return-address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 17 #"left-pair-address"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 4 #")))]"
0 0 26 29 1 #"\n"
0 0 26 3 36 #"                                   ["
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 17 #"left-pair-address"
0 0 26 3 1 #" "
0 0 14 3 18 #"right-pair-address"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 38 #"                                     ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 2 #" ("
0 0 14 3 14 #"return-address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 17 #"left-pair-address"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 40 #")))                                     "
0 0 26 29 1 #"\n"
0 0 26 3 38 #"                                     ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 2 #" ("
0 0 14 3 14 #"return-address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 17 #"left-pair-address"
0 0 26 3 2 #" ("
0 0 14 3 14 #"return-address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 18 #"right-pair-address"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #" "
0 0 14 3 4 #"seen"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 39 #"                                     )]"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    )"
0 0 26 29 1 #"\n"
0 0 26 3 20 #"                   )"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              )"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          )"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 14 3 13 #"reachableList"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          )"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 36 #";;Returns the left address of a pair"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"left-address"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 7 #"element"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 7 #"element"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 37 #";;Returns the right address of a pair"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"right-address"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 7 #"element"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 5 #"index"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 7 #"element"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"memVector-valid?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"memVector"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 14 #"validityVector"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-map"
0 0 26 3 1 #" "
0 0 14 3 11 #"sexp-valid?"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 17 #"only-contains-#t?"
0 0 26 3 2 #" ("
0 0 14 3 12 #"vector->list"
0 0 26 3 1 #" "
0 0 14 3 14 #"validityVector"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 13 #"boolean-true?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 23 3 2 #"#t"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 17 #"only-contains-#t?"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 6 #"andmap"
0 0 26 3 1 #" "
0 0 14 3 13 #"boolean-true?"
0 0 26 3 1 #" "
0 0 14 3 1 #"l"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 19 #"convert-from-memory"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 14 3 13 #"memory-vector"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 9 #"memLength"
0 0 26 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 26 3 1 #" "
0 0 14 3 13 #"memory-vector"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 2 #"<="
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 14 3 9 #"memLength"
0 0 26 3 3 #") ("
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 23 3 1 #"0"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 9 #"find-sexp"
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 14 3 13 #"memory-vector"
0 0 26 3 1 #" "
0 0 14 3 9 #"memLength"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"find-sexp"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"address"
0 0 26 3 1 #" "
0 0 14 3 13 #"memory-vector"
0 0 26 3 1 #" "
0 0 14 3 9 #"memLength"
0 0 26 3 1 #" "
0 0 14 3 12 #"seenElements"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 17 #"requestedPosition"
0 0 26 3 1 #" "
0 0 14 3 7 #"address"
0 0 26 3 2 #"])"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 16 #"requestedElement"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 13 #"memory-vector"
0 0 26 3 1 #" "
0 0 14 3 17 #"requestedPosition"
0 0 26 3 3 #")])"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 4 #"cond"
0 0 26 3 3 #" [("
0 0 14 3 7 #"string?"
0 0 26 3 1 #" "
0 0 14 3 16 #"requestedElement"
0 0 26 3 2 #") "
0 0 14 3 16 #"requestedElement"
0 0 26 3 1 #"]"
0 0 26 29 1 #"\n"
0 0 26 3 16 #"              [("
0 0 14 3 5 #"pair?"
0 0 26 3 1 #" "
0 0 14 3 16 #"requestedElement"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 47 #"                                              ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"memq"
0 0 26 3 1 #" "
0 0 14 3 16 #"requestedElement"
0 0 26 3 1 #" "
0 0 14 3 12 #"seenElements"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 50 #"                                                  "
0 0 14 3 16 #"requestedElement"
0 0 26 29 1 #"\n"
0 0 26 3 51 #"                                                  ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 9 #"find-sexp"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 16 #"requestedElement"
0 0 26 3 2 #") "
0 0 14 3 13 #"memory-vector"
0 0 26 3 1 #" "
0 0 14 3 9 #"memLength"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 16 #"requestedElement"
0 0 26 3 1 #" "
0 0 14 3 12 #"seenElements"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 57 #"                                                        ("
0 0 14 3 9 #"find-sexp"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 16 #"requestedElement"
0 0 26 3 2 #") "
0 0 14 3 13 #"memory-vector"
0 0 26 3 1 #" "
0 0 14 3 9 #"memLength"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 16 #"requestedElement"
0 0 26 3 1 #" "
0 0 14 3 12 #"seenElements"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 48 #"                                              )]"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ["
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 3 #"()]"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        )"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"copy-memory"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"roots"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 13 #"reachableList"
0 0 26 3 2 #" ("
0 0 14 3 6 #"tracer"
0 0 26 3 1 #" "
0 0 14 3 5 #"roots"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 2 #")]"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"             "
0 0 18 3 3 #";;["
0 0 18 3 10 #"rootVector"
0 0 18 3 2 #" ("
0 0 18 3 12 #"list->vector"
0 0 18 3 8 #" roots)]"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"             "
0 0 18 3 3 #";;["
0 0 18 3 12 #"rootElements"
0 0 18 3 2 #" ("
0 0 18 3 31 #"elements-at-reachable-addresses"
0 0 18 3 1 #" "
0 0 18 3 10 #"rootVector"
0 0 18 3 1 #" "
0 0 18 3 9 #"memVector"
0 0 18 3 2 #" ("
0 0 18 3 13 #"vector-length"
0 0 18 3 1 #" "
0 0 18 3 10 #"rootVector"
0 0 18 3 5 #") 0)]"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"             "
0 0 18 3 3 #";;["
0 0 18 3 17 #"reachableElements"
0 0 18 3 33 #" (elements-at-reachable-addresses"
0 0 18 3 1 #" "
0 0 18 3 9 #"reachable"
0 0 18 3 1 #" "
0 0 18 3 9 #"memVector"
0 0 18 3 2 #" ("
0 0 18 3 13 #"vector-length"
0 0 18 3 1 #" "
0 0 18 3 22 #"reachableVector) 0)]))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 31 #"elements-at-reachable-addresses"
0 0 26 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 2 #") "
0 0 14 3 9 #"memVector"
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 13 #"reachableList"
0 0 26 3 2 #") "
0 0 23 3 1 #"0"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 31 #"elements-at-reachable-addresses"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 15 #"reachableVector"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 1 #" "
0 0 14 3 19 #"reachableAddsLength"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 14 3 19 #"reachableAddsLength"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 23 3 1 #"'"
0 0 26 3 2 #"()"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 16 3 3 #"let"
0 0 26 3 3 #" (["
0 0 14 3 16 #"reachableElement"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 15 #"reachableVector"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 4 #"))])"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 31 #"elements-at-reachable-addresses"
0 0 26 3 1 #" "
0 0 14 3 15 #"reachableVector"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 16 #"reachableElement"
0 0 26 3 1 #" "
0 0 14 3 9 #"memVector"
0 0 26 3 2 #") "
0 0 14 3 19 #"reachableAddsLength"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 150
(
 #";;Takes a vector of the root elements, and iterates through it, addi"
 #"ng each root element (all all other elements it points to) to a new "
 #"list of memory"
) 0 0 26 29 1 #"\n"
0 0 18 3 140
(
 #";;It returns a list, first argument is the new root addresses, secon"
 #"d argument is the new memory list, third is the length of the new me"
 #"mory"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"make-new-memory"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 8 #"newRoots"
0 0 26 3 1 #" "
0 0 14 3 9 #"newMemory"
0 0 26 3 1 #" "
0 0 14 3 12 #"rootElements"
0 0 26 3 1 #" "
0 0 14 3 18 #"rootElementsLength"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 14 3 12 #"seenElements"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 2 #">="
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 14 3 18 #"rootElementsLength"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 8 #"newRoots"
0 0 26 3 1 #" "
0 0 14 3 9 #"newMemory"
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 9 #"newMemory"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 16 3 3 #"let"
0 0 26 3 2 #" ("
0 0 18 3 45 #";;[rootElement (vector-ref rootElements acc)]"
0 0 26 29 1 #"\n"
0 0 26 3 22 #"                     ["
0 0 14 3 26 #"addedElementRepresentation"
0 0 26 3 2 #" ("
0 0 14 3 32 #"convert-to-memory-representation"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 12 #"rootElements"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 4 #"() ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 9 #"newMemory"
0 0 26 3 3 #"))]"
0 0 26 29 1 #"\n"
0 0 26 3 18 #"                 )"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 4 #"memq"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 12 #"rootElements"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 2 #") "
0 0 14 3 12 #"seenElements"
0 0 26 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 26 #"addedElementRepresentation"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"make-new-memory"
0 0 26 3 1 #" "
0 0 14 3 8 #"newRoots"
0 0 26 3 1 #" "
0 0 14 3 9 #"newMemory"
0 0 26 3 1 #" "
0 0 14 3 12 #"rootElements"
0 0 26 3 1 #" "
0 0 14 3 18 #"rootElementsLength"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 14 3 12 #"seenElements"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 19 #"                  ("
0 0 14 3 15 #"make-new-memory"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"get-sexp"
0 0 26 3 1 #" "
0 0 14 3 26 #"addedElementRepresentation"
0 0 26 3 2 #") "
0 0 14 3 8 #"newRoots"
0 0 26 3 3 #") ("
0 0 14 3 6 #"append"
0 0 26 3 2 #" ("
0 0 14 3 7 #"get-mem"
0 0 26 3 1 #" "
0 0 14 3 26 #"addedElementRepresentation"
0 0 26 3 2 #") "
0 0 14 3 9 #"newMemory"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                             "
0 0 14 3 12 #"rootElements"
0 0 26 3 1 #" "
0 0 14 3 18 #"rootElementsLength"
0 0 26 3 2 #" ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 10 #"vector-ref"
0 0 26 3 1 #" "
0 0 14 3 12 #"rootElements"
0 0 26 3 1 #" "
0 0 14 3 3 #"acc"
0 0 26 3 2 #") "
0 0 14 3 12 #"seenElements"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 15 #"              )"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 23 #"assign-new-mem-position"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 7 #"element"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 32 #"convert-to-memory-representation"
0 0 26 3 1 #" "
0 0 14 3 7 #"element"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 2 #" ("
0 0 14 3 6 #"length"
0 0 26 3 1 #" "
0 0 14 3 6 #"memory"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   )"
0 0 26 29 1 #"\n"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 11 #"copy-memory"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 23 3 1 #"6"
0 0 26 3 3 #") ("
0 0 14 3 11 #"make-memory"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"(("
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 3 #") ("
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 2 #") "
0 0 20 3 3 #"\"b\""
0 0 26 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 26 3 2 #" ("
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 20 3 3 #"\"y\""
0 0 26 3 1 #" "
0 0 20 3 3 #"\"x\""
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 18 3 9 #";:marks 0"
0 0 26 29 1 #"\n"
0 0 18 3 131
(
 #";((0) (\"b\" \"a\" (5 . 6) \"y\" \"x\" (2 . 3) (1 . 4)) 7) ;;; this "
 #"solution is dependent on the order of traversal, so we don't give ma"
 #"rks"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 11 #"copy-memory"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 23 3 1 #"5"
0 0 26 3 3 #") ("
0 0 14 3 11 #"make-memory"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"(("
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 3 #") ("
0 0 23 3 1 #"5"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 2 #") "
0 0 20 3 3 #"\"b\""
0 0 26 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 26 3 2 #" ("
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 20 3 3 #"\"y\""
0 0 26 3 1 #" "
0 0 20 3 3 #"\"x\""
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 18 3 17 #";$test-copy-cycle"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";((0) ((0 . 0)) 1)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 11 #"copy-memory"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 23 3 1 #"6"
0 0 26 3 3 #") ("
0 0 14 3 11 #"make-memory"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"(("
0 0 23 3 1 #"6"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"5"
0 0 26 3 3 #") ("
0 0 23 3 1 #"5"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"6"
0 0 26 3 2 #") "
0 0 20 3 3 #"\"b\""
0 0 26 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 26 3 2 #" ("
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 20 3 3 #"\"y\""
0 0 26 3 1 #" "
0 0 20 3 3 #"\"x\""
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 18 3 18 #";$test-copy-cycle2"
0 0 26 29 1 #"\n"
0 0 18 3 30 #";(or ((0) ((1 . 0) (0 . 1)) 2)"
0 0 26 29 1 #"\n"
0 0 18 3 31 #";    ((1) ((1 . 0) (0 . 1)) 2))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 11 #"copy-memory"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 1 #"("
0 0 23 3 1 #"6"
0 0 26 3 3 #") ("
0 0 14 3 11 #"make-memory"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 2 #"(("
0 0 23 3 1 #"2"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"2"
0 0 26 3 3 #") ("
0 0 23 3 1 #"3"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"4"
0 0 26 3 2 #") "
0 0 20 3 3 #"\"b\""
0 0 26 3 1 #" "
0 0 20 3 3 #"\"a\""
0 0 26 3 2 #" ("
0 0 23 3 1 #"0"
0 0 26 3 1 #" "
0 0 30 3 1 #"."
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #") "
0 0 20 3 3 #"\"y\""
0 0 26 3 1 #" "
0 0 20 3 3 #"\"x\""
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 18 3 77
(
 #";;$test-copy-sharing ;;; this solution is dependent on the order of "
 #"traversal"
) 0 0 26 29 1 #"\n"
0 0 18 3 39 #";(or ((0) (\"y\" \"x\" (2 . 3) (1 . 1)) 4) "
0 0 26 29 1 #"\n"
0 0 18 3 38 #";    ((0) (\"x\" \"y\" (3 . 2) (1 . 1)) 4)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 18 3 37 #";   ((0) (\"x\" (3 . 1) \"y\" (2 . 2)) 4)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 18 3 36 #";  ((0) (\"y\" (1 . 3) \"x\" (2 . 2)) 4)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 18 3 36 #";  ((0) ((1 . 2) \"y\" \"x\" (3 . 3)) 4)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 18 3 36 #";  ((0) ((2 . 1) \"x\" \"y\" (3 . 3)) 4)"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 39 #";    ((1) (\"y\" \"x\" (0 . 0) (2 . 3)) 4) "
0 0 26 29 1 #"\n"
0 0 18 3 38 #";    ((1) (\"x\" \"y\" (0 . 0) (3 . 2)) 4)"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 18 3 37 #";   ((1) (\"x\" (3 . 0) (2 . 2) \"y\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 18 3 36 #";  ((1) (\"y\" (0 . 3) (2 . 2) \"x\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 18 3 35 #"; ((1) ((0 . 2) \"y\" (3 . 3) \"x\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 34 #";((1) ((2 . 0) \"x\" (3 . 3) \"y\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 18 3 39 #";    ((2) (\"y\" (0 . 0) \"x\" (1 . 3)) 4) "
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 18 3 37 #";   ((2) (\"x\" (0 . 0) \"y\" (3 . 1)) 4)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 18 3 36 #";  ((2) (\"x\" (1 . 1) (3 . 0) \"y\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 18 3 35 #"; ((2) (\"y\" (1 . 1) (0 . 3) \"x\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 34 #";((2) ((0 . 1) (3 . 3) \"y\" \"x\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 34 #";((2) ((1 . 0) (3 . 3) \"x\" \"y\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 18 3 39 #";    ((3) ((0 . 0) \"y\" \"x\" (1 . 2)) 4) "
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 18 3 37 #";   ((3) ((0 . 0) \"x\" \"y\" (2 . 1)) 4)"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 18 3 36 #";  ((3) ((1 . 1) \"x\" (2 . 0) \"y\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 18 3 35 #"; ((3) ((1 . 1) \"y\" (0 . 2) \"x\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 34 #";((3) ((2 . 2) (0 . 1) \"y\" \"x\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 34 #";((3) ((2 . 2) (1 . 0) \"x\" \"y\") 4)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0 0 18 3 2 #";)"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 26 29 1 #"\n"
0           0
